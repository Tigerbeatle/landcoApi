Data Points:




Create / edit profile
Get Profile
Delete Account
Create / edit item
Get Item




Group Listing

Global - Buy all on amazon
Image
Title
Writeup - By Collector/Kit maker
Add Comment Link
View on Amazon

Links: Save, Add to kit, share

https://kit.com/MattEstlea


// Size defines the item size
type Size struct {
    H   int
    W   float64
    Uom string
}

// Item defines an item
type Item struct {
    OID  objectid.ObjectID `bson:"_id,omitempty"` // omitempty not working
    Item string
    Qty  int
    Tags []string
    Size Size
}

func main() {
    // connect to MongoDB
    client, err := mongo.Connect(context.Background(), "mongodb://localhost:27017", nil)
    if err != nil {
        log.Fatal(err)
    }
    db := client.Database("mongosample")
    inventory := db.Collection("inventory")

    // write document
    itemWrite := Item{Item: "canvas", Qty: 100, Tags: []string{"cotton"}, Size: Size{H: 28, W: 35.5, Uom: "cm"}}
    itemWrite.OID = objectid.New()
    fmt.Printf("itemWrite = %v\n", itemWrite)

    result, err := inventory.InsertOne(context.Background(), itemWrite)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("result = %#v\n", result)

    // read documents
    cursor, err := inventory.Find(
        context.Background(),
        bson.NewDocument(bson.EC.String("item", "canvas")),
    )
    if err != nil {
        log.Fatal(err)
    }
    defer cursor.Close(context.Background())

    itemRead := Item{}
    for cursor.Next(context.Background()) {
        err := cursor.Decode(&itemRead)
        if err != nil {
            log.Fatal(err)
        }
        fmt.Printf("itemRead = %v\n", itemRead)
    }
}



/*
	// for loop will process if there are any records in cursor (cursor returns true or false)
	itemRead := User{}
	for cursor.Next(context.Background()) {
		fmt.Println("In the loop 2")
		err := cursor.Decode(&itemRead)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Printf("userRead = %v\n", itemRead.UUID)
		return itemRead.UUID, err
	}
	return "", err

*/



res, err := coll.InsertOne(context.Background(), bson.NewDocument(
    bson.EC.String("string", "test"),
    bson.EC.Int64("integer", 123),
    bson.EC.Double("float", 0.123),
    bson.EC.ArrayFromElements("array",
        bson.VC.String("t"), bson.VC.String("e"),
        bson.VC.String("s"), bson.VC.String("t")),
    bson.EC.ObjectID("objectid", objectid.New()),
    bson.EC.DateTime("time", time.Now().UnixNano()/1e6), // Must pass milliseconds
))
It's more verbose, but it's explicit in what we want the result document in MongoDB to be. The result document will look like this:

{
    "_id" : ObjectId("5ac5f598ca151255c6fc0ffb"),
    "string" : "test",
    "integer" : NumberLong(123),
    "float" : 0.123,
    "array" : [
        "t",
        "e",
        "s",
        "t"
    ],
    "objectid" : ObjectId("5ac5f598ca151255c6fc0ffa"),
    "time" : ISODate("2018-04-05T10:08:24.148Z")
}



ReplaceOne Example:
var filter = bson.NewDocument(bson.EC.String("email", user.Email))
	 var replacement = bson.NewDocument(
		 bson.EC.String("email", user.Email),
		 bson.EC.String("uuid", user.UUID),
		 bson.EC.String("password", user.Password),
		 bson.EC.String("LexpHours", user.LexpHours),
		 bson.EC.String("Enabled","true"),
		 bson.EC.Int64("Lexp",user.Lexp),

		 bson.EC.SubDocumentFromElements("Role",
			 bson.EC.Int32("Index", 0),
			 bson.EC.Int32("Level", 0),
			 bson.EC.String("Name", ""),
		 ))

	res, err := r.Coll.ReplaceOne(context.Background(), filter,
		replacement,
		replaceopt.Upsert(true),
	)


	if err != nil {
		log.Fatal(err)
	}

	if res.MatchedCount == 0 {
	// Do something useful if there was no match (new record was inserted)
	}







url_register = llHTTPRequest("http://www.landco-sl.com:8002/api/1.0/dns/register",[HTTP_METHOD,"GET",HTTP_ACCEPT,"application/json"],"serialNumber="+(string)objectKey+"&language="+language+"&version="+(string)myCurrentVersion+"&aliveTestCount=0&removeTarget=no&aliveTestStatus=Pass&ownerName="+ownerName+"&ownerUUID="+(string)ownerUUID+"&parcelSurl="+surl+"&parcelUrl="+llEscapeURL(url)+"&parcelName="+parcelName+"&type=PARCEL_IDENTIEIER");


url_register = llHTTPRequest("http://www.landco-sl.com:8002/api/1.0/dns/register",[HTTP_METHOD,"GET",HTTP_ACCEPT,"application/json"],

"serialNumber="+(string)objectKey+"&
language="+language+"&
version="+(string)myCurrentVersion+"&
aliveTestCount=0&
removeTarget=no&
aliveTestStatus=Pass&
ownerName="+ownerName+"&
ownerUUID="+(string)ownerUUID+"&
parcelSurl="+surl+"&
parcelUrl="+llEscapeURL(url)+"&
parcelName="+parcelName+"&
type=PARCEL_IDENTIEIER");


serialNumber
language
version
aliveTestCount
removeTarget
aliveTestStatus
ownerName
ownerUUID
parcelSurl
parcelUrl
parcelName
type





